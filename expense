#! /usr/bin/env ruby

require "pg"
require "io/console"

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expense")
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ tuple['id'].rjust(3),
                  tuple['created_on'].rjust(10),
                  tuple['amount'].rjust(12),
                  tuple['memo'] ]
  
      puts columns.join(' | ')
    end

    display_total(expenses)
  end

  def display_total(expenses)
    total = expenses.field_values("amount").map(&:to_f).inject(:+)
    puts "#{'-' * 48}"
    puts "Total #{total.to_s.rjust(25)}"
  end

  def display_count(expenses)
    count =expenses.ntuples
    if  count == 0
      puts "There are no expenses."
    else
      puts "There #{count == 1 ? 'is' : 'are'} #{count} expense#{'s' if count > 1}."
    end
  end

  def list_expenses
    expenses = connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
    display_count(expenses)
    display_expenses(expenses) if expenses.ntuples > 0
  end
  
  def add_new_expense(amount, memo)
    sql = "INSERT INTO expenses (amount, memo) VALUES ($1, $2);"
    connection.exec_params(sql, [amount, memo])
  end

  def search(term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    search_result = connection.exec_params(sql, ["%#{term}%"])
    display_count(search_result)
    display_expenses(search_result) if search_result.ntuples > 0
  end

  def delete(id)
    find_item_sql = "SELECT * FROM expenses WHERE id = $1;"
    item_to_delete = connection.exec_params(find_item_sql, [id])
    
    if item_to_delete.ntuples == 1
      delete_item_sql = "DELETE FROM expenses WHERE id=$1;"
      connection.exec_params(delete_item_sql, [id])
      puts "The following expense has been deleted:"
      display_expenses(item_to_delete)
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  def delete_all_expenses
    connection.exec("DELETE FROM expenses;")
    puts "All expenses have been deleted."
  end

  private

  attr_reader :connection
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    command = args.shift

    case command
    when 'list' 
      @application.list_expenses
    when 'add'
      amount = ARGV[0]
      memo = ARGV[1]
      abort "You must provide an amount and memo, and no extra values." unless ARGV.size >= 2
      @application.add_new_expense(amount, memo)
    when 'search'
      term = ARGV[0]
      @application.search(term)
    when 'delete'
      id = ARGV[0]
      @application.delete(id)
    when 'clear'
      puts "This will remove all expenses. Are you sure? (y/n)"
      answer = $stdin.getch
      @application.delete_all_expenses if answer == 'y'      
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
    An expense recording system
  
    Commands:
  
    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)
